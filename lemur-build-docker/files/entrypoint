#!/bin/bash

set -eo pipefail

if [ -z "${POSTGRES_USER}" ] || [ -z "${POSTGRES_PASSWORD}" ] || [ -z "${POSTGRES_HOST}" ] || [ -z "${POSTGRES_DB}" ];then
  echo "Database vars not set"
  exit 1
fi

export POSTGRES_PORT="${POSTGRES_PORT:-5432}"
echo "# Postgres DB is ${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"

export LEMUR_ADMIN_PASSWORD="${LEMUR_ADMIN_PASSWORD:-admin}"

export SQLALCHEMY_DATABASE_URI="postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB"

echo "# Verifying postgres connectivity"
PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -d $POSTGRES_DB --command 'select 1;'

if [ "${POSTGRES_DB_MODE}" = "load-from-dump" ]; then
	echo " # Initializing DB with dump from existing database"
	echo " # Dropping and re-creating DB ${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB} with user ${POSTGRES_USER}"
	PGPASSWORD=$POSTGRES_PASSWORD dropdb -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER $POSTGRES_DB --if-exists
	PGPASSWORD=$POSTGRES_PASSWORD createdb -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER $POSTGRES_DB -T template0
	export POSTGRES_DUMP_PORT="${POSTGRES_DUMP_PORT:-$POSTGRES_PORT}"
	export POSTGRES_DUMP_USER="${POSTGRES_DUMP_USER:-$POSTGRES_USER}"
	export POSTGRES_DUMP_DB="${POSTGRES_DUMP_DB:-$POSTGRES_DB}"
	export POSTGRES_DUMP_FILE="/tmp/db-dump.sql"
	export POSTGRES_DUMP_PASSWORD="${POSTGRES_DUMP_PASSWORD}"
	echo " # Dumping existing database from ${POSTGRES_DUMP_HOST}:${POSTGRES_DUMP_PORT}/${POSTGRES_DUMP_DB} with user ${POSTGRES_DUMP_USER}"
	PGPASSWORD=$POSTGRES_DUMP_PASSWORD pg_dump -h ${POSTGRES_DUMP_HOST} -p ${POSTGRES_DUMP_PORT} -U $POSTGRES_DUMP_USER ${POSTGRES_DB} > $POSTGRES_DUMP_FILE
	echo " # Dumped database ${POSTGRES_DUMP_DB} to ${POSTGRES_DUMP_FILE}, size was $(stat -c%s "$POSTGRES_DUMP_FILE") bytes"
	echo " # Loading dumped database into ${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB} with user ${POSTGRES_USER}"
	PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER $POSTGRES_DB < $POSTGRES_DUMP_FILE
	echo " # Database load complete"
elif [ "${POSTGRES_DB_MODE}" = "init" ]; then
	echo " # Initializing DB from scratch"
	echo " # Dropping and re-creating DB ${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB} with user ${POSTGRES_USER}"
	PGPASSWORD=$POSTGRES_PASSWORD dropdb -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER $POSTGRES_DB --if-exists
	PGPASSWORD=$POSTGRES_PASSWORD createdb -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER $POSTGRES_DB -T template0
	cd /opt/lemur/lemur
	/opt/venv/bin/python3 /opt/lemur/lemur/manage.py --config=/home/lemur/.lemur/lemur.conf.py init -p "${LEMUR_ADMIN_PASSWORD}"
	echo " # Lemur has been initialized with admin username 'lemur' and the specified password"
else
	echo " # POSTGRES_DB_MODE was neither 'load-from-dump' nor 'init', so will use existing database"
	# for first time use, init should not touched exists data
	cd /opt/lemur/lemur
	/opt/venv/bin/python3 /opt/lemur/lemur/manage.py --config=/home/lemur/.lemur/lemur.conf.py init -p "${LEMUR_ADMIN_PASSWORD}"
fi

echo " # Creating Postgres trgm extension"
PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -d $POSTGRES_DB --command 'CREATE EXTENSION IF NOT EXISTS pg_trgm;'

echo " # Done"

exec "$@"